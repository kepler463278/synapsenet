[package]
name = "synapsenet"
version = "0.2.0"
edition = "2021"
authors = ["SynapseNet Contributors"]
license = "MIT OR Apache-2.0"
description = "Decentralized semantic memory network with Proof of Emergence"
repository = "https://github.com/synapsenet/synapsenet"

[workspace]
members = [
    "crates/core",
    "crates/p2p",
    "crates/storage",
    "crates/ai",
    "crates/economy",
    "crates/governance",
    "crates/api",
    "crates/cli",
    "apps/desktop/src-tauri",
]
exclude = [
    "crates/tauri-app",
]

[workspace.dependencies]
# Crypto - Classical
ed25519-dalek = "2.1"
blake3 = "1.5"
rand = "0.8"

# Crypto - Post-Quantum (PQC)
pqcrypto-dilithium = "0.5"
pqcrypto-kyber = "0.8"
pqcrypto-traits = "0.3"

# Storage
rusqlite = { version = "0.31", features = ["bundled"] }
parquet = "53.0"
arrow = "53.0"

# P2P
libp2p = { version = "0.53", features = ["gossipsub", "mdns", "noise", "tcp", "yamux", "macros", "identify", "tokio", "kad"] }
tokio = { version = "1.36", features = ["full"] }
futures = "0.3"

# Vector index
hnsw_rs = "0.3"

# AI/ML
ort = { version = "2.0.0-rc.10", default-features = false, features = ["load-dynamic"] }
ndarray = "0.15"
tokenizers = "0.19"
reqwest = { version = "0.12", features = ["blocking", "json"] }
sha2 = "0.10"

# Serialization
serde = { version = "1.0", features = ["derive"] }
serde_json = "1.0"
bincode = "1.3"

# Logging
tracing = "0.1"
tracing-subscriber = { version = "0.3", features = ["env-filter"] }

# CLI
clap = { version = "4.5", features = ["derive"] }
anyhow = "1.0"
thiserror = "1.0"

# Async
async-trait = "0.1"

[dev-dependencies]
synapsenet-core = { path = "crates/core" }
synapsenet-p2p = { path = "crates/p2p" }
synapsenet-storage = { path = "crates/storage" }
synapsenet-ai = { path = "crates/ai" }
synapsenet-governance = { path = "crates/governance" }
synapsenet-economy = { path = "crates/economy" }
ed25519-dalek = { workspace = true }
rand = { workspace = true }
anyhow = { workspace = true }
tokio = { workspace = true }
tracing = { workspace = true }
tracing-subscriber = { workspace = true }
chrono = "0.4"
futures = { workspace = true }
criterion = { version = "0.5", features = ["html_reports"] }
tempfile = "3.8"

[[example]]
name = "basic_usage"
path = "examples/basic_usage.rs"

[[example]]
name = "policy_demo"
path = "examples/policy_demo.rs"

[[example]]
name = "poe_demo"
path = "examples/poe_demo.rs"

[[example]]
name = "p2p_demo"
path = "examples/p2p_demo.rs"

[[example]]
name = "p2p_broadcast"
path = "examples/p2p_broadcast.rs"

[[example]]
name = "p2p_query"
path = "examples/p2p_query.rs"

[[example]]
name = "p2p_with_storage"
path = "examples/p2p_with_storage.rs"

[[example]]
name = "pqc_demo"
path = "examples/pqc_demo.rs"

[[example]]
name = "gpu_demo"
path = "examples/gpu_demo.rs"

[profile.release]
opt-level = 3
lto = true
codegen-units = 1
strip = true

[features]
default = ["hnsw", "classical-crypto"]
hnsw = []
faiss = []
ui = []
# Crypto features
classical-crypto = ["synapsenet-core/classical-crypto"]
pqc = ["pqc-dilithium", "pqc-kyber"]
pqc-dilithium = ["synapsenet-core/pqc-dilithium"]
pqc-kyber = ["synapsenet-core/pqc-kyber", "synapsenet-p2p/pqc-kyber"]
# GPU features
gpu = []
coreml = ["synapsenet-ai/coreml", "gpu"]
directml = ["synapsenet-ai/directml", "gpu"]
cuda = ["synapsenet-ai/cuda", "gpu"]

[[bench]]
name = "performance_benchmarks"
harness = false
